<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Linq.Expressions</name>
  </assembly>
  <members>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>表示排序操作的结果。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>表示排序操作的结果。</summary>
      <typeparam name="T">数据源中数据的类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>提供对未指定数据类型的特定数据源的查询进行计算的功能。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>获取在执行与 <see cref="T:System.Linq.IQueryable" /> 的此实例关联的表达式目录树时返回的元素的类型。</summary>
      <returns>一个 <see cref="T:System.Type" />，表示在执行与之关联的表达式目录树时返回的元素的类型。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>获取与 <see cref="T:System.Linq.IQueryable" /> 的实例关联的表达式目录树。</summary>
      <returns>与 <see cref="T:System.Linq.IQueryable" /> 的此实例关联的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>获取与此数据源关联的查询提供程序。</summary>
      <returns>与此数据源关联的 <see cref="T:System.Linq.IQueryProvider" />。</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>提供对数据类型已知的特定数据源的查询进行计算的功能。</summary>
      <typeparam name="T">数据源中数据的类型。此类型参数是协变。即可以使用指定的类型或派生程度更高的类型。有关协变和逆变的详细信息，请参阅 泛型中的协变和逆变。</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>定义用于创建和执行 <see cref="T:System.Linq.IQueryable" /> 对象所描述的查询的方法。</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>构造一个 <see cref="T:System.Linq.IQueryable`1" /> 对象，该对象可计算指定表达式目录树所表示的查询。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable`1" />，它可计算指定表达式目录树所表示的查询。</returns>
      <param name="expression">表示 LINQ 查询的表达式目录树。</param>
      <typeparam name="TElement">返回的 <see cref="T:System.Linq.IQueryable`1" /> 的元素的类型。</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>构造一个 <see cref="T:System.Linq.IQueryable" /> 对象，该对象可计算指定表达式目录树所表示的查询。</summary>
      <returns>一个 <see cref="T:System.Linq.IQueryable" />，它可计算指定表达式目录树所表示的查询。</returns>
      <param name="expression">表示 LINQ 查询的表达式目录树。</param>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>执行指定表达式目录树所表示的强类型查询。</summary>
      <returns>执行指定查询所生成的值。</returns>
      <param name="expression">表示 LINQ 查询的表达式目录树。</param>
      <typeparam name="TResult">执行查询所生成的值的类型。</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>执行指定表达式目录树所表示的查询。</summary>
      <returns>执行指定查询所生成的值。</returns>
      <param name="expression">表示 LINQ 查询的表达式目录树。</param>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>表示包含二元运算符的表达式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>获取一个值，该值指示是否可以减小此表达式树节点。</summary>
      <returns>如果可以简化表达式树节点，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>获取合并运算或复合赋值运算使用的类型转换函数。</summary>
      <returns>一个表示类型转换函数的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>获取一个值，该值指示表达式目录树节点是否表示对运算符的提升调用。</summary>
      <returns>如果该节点表示提升调用，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>获取一个值，该值指示表达式目录树节点是否表示对运算符（其返回类型提升为可以为 null 的类型）的提升调用。</summary>
      <returns>如果该运算符的返回类型提升为可以为 null 的类型，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>获取二元运算的左操作数。</summary>
      <returns>表示二元运算的左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>获取二元运算的实现方法。</summary>
      <returns>表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>将二进制表达式节点简化为更简单的表达式。</summary>
      <returns>已简化的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>获取二元运算的右操作数。</summary>
      <returns>表示二元运算的右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="left">结果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 属性。</param>
      <param name="conversion">结果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性。</param>
      <param name="right">结果的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>表示一个包含可在其中定义变量的表达式序列的块。</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>获取此块中的表达式。</summary>
      <returns>包含此块中所有表达式的只读集合。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>返回此表达式的节点类型。扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>获取此块中的最后一个表达式。</summary>
      <returns>表示此块中最后一个表达式的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.BlockExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="variables">结果的 <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> 属性。</param>
      <param name="expressions">结果的 <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> 属性。</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>获取在此块中定义的变量。</summary>
      <returns>包含在此块中定义的所有变量的只读集合。</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>表示 try 块中的 catch 语句。</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>获取 catch 块的主体。</summary>
      <returns>表示 catch 主体的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>获取 <see cref="T:System.Linq.Expressions.CatchBlock" /> 筛选器的主体。</summary>
      <returns>表示 <see cref="T:System.Linq.Expressions.CatchBlock" /> 筛选器的主体的 <see cref="T:System.Linq.Expressions.Expression" /> 对象。</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>获取此处理程序捕捉的 <see cref="T:System.Exception" /> 的类型。</summary>
      <returns>
        <see cref="T:System.Type" /> 对象，表示此处理程序捕捉的 <see cref="T:System.Exception" /> 的类型。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>返回表示当前 <see cref="T:System.Object" /> 的 <see cref="T:System.String" />。</summary>
      <returns>
        <see cref="T:System.String" />，表示当前的 <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="variable">结果的 <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> 属性。</param>
      <param name="filter">结果的 <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> 属性。</param>
      <param name="body">结果的 <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> 属性。</param>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>获取对此处理程序捕捉的 <see cref="T:System.Exception" /> 对象的引用。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ParameterExpression" /> 对象，表示对此处理程序捕捉的 <see cref="T:System.Exception" /> 对象的引用。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>表示包含条件运算符的表达式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>获取当测试的计算结果为 false 时要执行的表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression" />，表示当测试结果为 false 时要执行的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>获取当测试的计算结果为 true 时要执行的表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression" />，表示当测试为 true 时要执行的表达式。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>返回此表达式的节点类型。扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>获取条件运算的测试。</summary>
      <returns>一个表示条件运算的测试的 <see cref="T:System.Linq.Expressions.Expression" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="test">结果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> 属性。</param>
      <param name="ifTrue">结果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性。</param>
      <param name="ifFalse">结果的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>表示具有常量值的表达式。</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>返回此 Expression 的节点类型。扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.ConstantExpression.Type" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>获取常量表达式的值。</summary>
      <returns>
        <see cref="T:System.Object" /> 等于所表示的表达式的值。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>发出或清除调试信息的序列点。这允许调试器在调试时突出显示正确的源代码。</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>获取表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</summary>
      <returns>表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>获取此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束列。</summary>
      <returns>用于生成包装表达式的代码的结束列号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>获取此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束行。</summary>
      <returns>用于生成包装表达式的代码的结束行号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>获取指示 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 是否用于清除序列点的值。</summary>
      <returns>如果 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 用于清除序列点，则为 True；否则为 false。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>返回此 <see cref="T:System.Linq.Expressions.Expression" /> 的节点类型。</summary>
      <returns>用于表示此表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>获取此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始列。</summary>
      <returns>用于生成包装表达式的代码的起始列号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>获取此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始行。</summary>
      <returns>用于生成包装表达式的代码的起始行号。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>表示类型或空表达式的默认值。</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>返回此表达式的节点类型。扩展节点应在重写此方法时返回 <see cref="F:System.Linq.Expressions.ExpressionType.Extension" />。</summary>
      <returns>该表达式的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>获取此 <see cref="T:System.Linq.Expressions.Expression" /> 所表示的表达式的静态类型。</summary>
      <returns>表示表达式的静态类型的 <see cref="P:System.Linq.Expressions.DefaultExpression.Type" />。</returns>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>表示 <see cref="T:System.Collections.IEnumerable" /> 集合的单个元素的初始值设定项。</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>获取用于将某个元素添加到 <see cref="T:System.Collections.IEnumerable" /> 集合的实例方法。</summary>
      <returns>表示用于将某个元素添加到集合的实例方法的 <see cref="T:System.Reflection.MethodInfo" />。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>获取传递给某一方法的参数集合，该方法会将元素添加到 <see cref="T:System.Collections.IEnumerable" /> 集合中。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的 <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />，这些对象表示用于将元素添加到集合中的方法的参数。</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#ArgumentCount"></member>
    <member name="M:System.Linq.Expressions.ElementInit.System#Linq#Expressions#IArgumentProvider#GetArgument(System.Int32)"></member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>返回 <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的文本表示形式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.ElementInit" /> 对象的文本表示形式。</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个与此表达式类似的新表达式，但使用所提供的子级。如果所有子级都相同，则将返回此表达式。</summary>
      <returns>此表达式（如果未更改任何子级），或带有更新的子级的表达式。</returns>
      <param name="arguments">结果的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性。</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>提供一种基类，表示表达式树节点的类派生自该基类。它还包含用来创建各种节点类型的 static（在 Visual Basic 中为 Shared）工厂方法。这是一个 abstract 类。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>构造 <see cref="T:System.Linq.Expressions.Expression" /> 的新实例。</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>调度到此节点类型的特定 Visit 方法。例如，<see cref="T:System.Linq.Expressions.MethodCallExpression" /> 调用 <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />。</summary>
      <returns>对此节点进行访问的结果。</returns>
      <param name="visitor">对此节点进行访问的访问者。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义加法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Add" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义加法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示不进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示进行溢出检查的加法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义加法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示进行溢出检查的算术加法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义加法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 运算的 AND。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 AND.Type 和 <paramref name="left" />.Type 定义按位 <paramref name="right" /> 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位 <see cref="T:System.Linq.Expressions.BinaryExpression" /> 运算的 AND。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.And" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 AND.Type 和 <paramref name="left" />.Type 定义按位 <paramref name="right" /> 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数的计算结果为 AND 时才计算第二个操作数的条件 true 运算。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 AND.Type 和 <paramref name="left" />.Type 定义按位 <paramref name="right" /> 运算符。- 或 -<paramref name="left" />.Type 和 <paramref name="right" />.Type 不是同一布尔值类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数解析为 true 时，才计算第二个操作数的条件 AND 运算。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 AND.Type 和 <paramref name="left" />.Type 定义按位 <paramref name="right" /> 运算符。- 或 -<paramref name="method" /> 为 null 并且 <paramref name="left" />.Type 和 <paramref name="right" />.Type 不是同一布尔值类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示按位 AND 赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个用于访问多维数组的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="array">一个表示多维数组的表达式。</param>
      <param name="indexes">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，其中包含用于为数组编制索引的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>创建一个用于访问数组的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="array">一个表示要编制索引的数组的表达式。</param>
      <param name="indexes">一个数组，其中包含用于为数组编制索引的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示将数组索引运算符应用到多个级别的数组中。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。</returns>
      <param name="array">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />。</param>
      <param name="indexes">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="indexes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不表示数组类型。- 或 -<paramref name="array" />.Type 的秩与 <paramref name="indexes" /> 中的元素数量不匹配。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的 <paramref name="indexes" /> 属性不表示 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示将数组索引运算符应用到级别一的数组中。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="array">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="index">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="index" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不表示数组类型。- 或 -<paramref name="array" />.Type 表示秩不为 1 的数组类型。- 或 -<paramref name="index" />.Type 不表示 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示将数组索引运算符应用到多维数组中。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。</returns>
      <param name="array">
        <see cref="T:System.Linq.Expressions.Expression" /> 实例的数组 - 数组索引操作的索引。</param>
      <param name="indexes">用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 或 <paramref name="indexes" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不表示数组类型。- 或 -<paramref name="array" />.Type 的秩与 <paramref name="indexes" /> 中的元素数量不匹配。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的 <paramref name="indexes" /> 属性不表示 <see cref="T:System.Int32" /> 类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示获取一维数组的长度的表达式。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" />，<see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 属性等于 <paramref name="array" />。</returns>
      <param name="array">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type 不表示数组类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Assign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MemberAssignment" />，它表示字段或属性的初始化。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> 的 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 等于 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> 且 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性设置为指定值。</returns>
      <param name="member">要将 <see cref="T:System.Reflection.MemberInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。- 或 -<paramref name="member" /> 所表示的属性没有 set 访问器。- 或 -<paramref name="expression" />.Type 不能赋给 <paramref name="member" /> 所表示的字段或属性的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>使用属性访问器方法，创建一个表示成员初始化的 <see cref="T:System.Linq.Expressions.MemberAssignment" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberAssignment" /> 的 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为 <see cref="T:System.Reflection.PropertyInfo" />（表示 <paramref name="propertyAccessor" /> 中访问的属性），<see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> 属性设置为 <paramref name="expression" />。</returns>
      <param name="propertyAccessor">一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。- 或 -<paramref name="propertyAccessor" /> 所访问的属性没有 set 访问器。- 或 -<paramref name="expression" />.Type 不能赋给 <paramref name="member" /> 所表示的字段或属性的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含两个表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含三个表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
      <param name="arg2">块中的第三个表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含四个表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
      <param name="arg2">块中的第三个表达式。</param>
      <param name="arg3">块中的第四个表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含五个表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="arg0">块中的第一个表达式。</param>
      <param name="arg1">块中的第二个表达式。</param>
      <param name="arg2">块中的第三个表达式。</param>
      <param name="arg3">块中的第四个表达式。</param>
      <param name="arg4">块中的第五个表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式和特定结果类型，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">块的结果类型。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">块的结果类型。</param>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定的变量和表达式。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">块的结果类型。</param>
      <param name="variables">块中的变量。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.BlockExpression" />，其中包含给定表达式和特定结果类型，但不包含任何变量。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.BlockExpression" />。</returns>
      <param name="type">块的结果类型。</param>
      <param name="expressions">块中的表达式。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个表示 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有将在跳转时传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示具有指定类型的 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>创建一个表示具有指定类型的 break 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Break，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示调用不带参数的方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="instance">一个 <see cref="T:System.Linq.Expressions.Expression" />，它指定一个实例方法调用，对于 null 方法（在 Visual Basic 中为 static 方法）应传递 Shared。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。- 或 -<paramref name="instance" /> 为 null，并且 <paramref name="method" /> 表示实例方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 不能赋给 <paramref name="method" /> 所表示的方法的声明类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个表示调用带参数的方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。</returns>
      <param name="instance">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />，它为 null（在 Visual Basic 中则为static）方法传递 Shared。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arguments">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。- 或 -<paramref name="instance" /> 为 null，并且 <paramref name="method" /> 表示实例方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 不能赋给 <paramref name="method" /> 所表示的方法的声明类型。- 或 -<paramref name="arguments" /> 中的元素数量与 <paramref name="method" /> 所表示的方法的参数数量不相等。- 或 -<paramref name="arguments" /> 的一个或多个元素不能赋给 <paramref name="method" /> 所表示的方法的相应参数。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对采用两个参数的方法的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="instance">指定一个实例调用的实例的 <see cref="T:System.Linq.Expressions.Expression" />。（对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null）。</param>
      <param name="method">表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用三个参数的方法的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="instance">指定一个实例调用的实例的 <see cref="T:System.Linq.Expressions.Expression" />。（对于 static 方法（在 Visual Basic 中为 Shared 方法）应传递 null）。</param>
      <param name="method">表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个表示调用带参数的方法的 <see cref="T:System.Linq.Expressions.MethodCallExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。</returns>
      <param name="instance">一个 <see cref="T:System.Linq.Expressions.Expression" />，它指定一个实例方法调用，对于 null 方法（在 Visual Basic 中为 static 方法）应传递 Shared。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arguments">用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。- 或 -<paramref name="instance" /> 为 null，并且 <paramref name="method" /> 表示实例方法。- 或 -<paramref name="arguments" /> 不为 null，且其一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type 不能赋给 <paramref name="method" /> 所表示的方法的声明类型。- 或 -<paramref name="arguments" /> 中的元素数量与 <paramref name="method" /> 所表示的方法的参数数量不相等。- 或 -<paramref name="arguments" /> 的一个或多个元素不能赋给 <paramref name="method" /> 所表示的方法的相应参数。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>通过调用合适的工厂方法，创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示方法调用。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 属性等于 <paramref name="instance" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 设置为表示指定实例方法的 <see cref="T:System.Reflection.MethodInfo" /> 且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 设置为指定参数。</returns>
      <param name="instance">将搜索 <see cref="T:System.Linq.Expressions.Expression" /> 的 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性值，查看其是否有特定方法。</param>
      <param name="methodName">方法的名称。</param>
      <param name="typeArguments">指定泛型方法的类型参数的 <see cref="T:System.Type" /> 对象的数组。当 methodName 指定非泛型方法时，此参数应为 null。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组，表示方法的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 或 <paramref name="methodName" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="methodName" />.Type 或其基类型中找不到这样的方法：名称为 <paramref name="typeArguments" />、类型参数与 <paramref name="arguments" /> 相匹配，且参数类型与 <paramref name="instance" /> 相匹配。- 或 -在 <paramref name="methodName" />.Type 或其基类型中找到多个这样的方法：名称为 <paramref name="typeArguments" />，类型参数与 <paramref name="arguments" /> 相匹配，参数类型与 <paramref name="instance" /> 相匹配。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对 static 方法（在 Visual Basic 中为 Shared 方法）的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="method">表示目标方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="arguments">表示调用参数的 <see cref="T:System.Linq.Expressions.Expression" /> 的集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用一个参数的 static 方法（在 Visual Basic 中为 Shared 方法）的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用两个参数的静态方法的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用三个参数的静态方法的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用四个参数的静态方法的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">用于表示第四个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对使用五个参数的静态方法的调用。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为指定值。</returns>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</param>
      <param name="arg0">用于表示第一个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg1">用于表示第二个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg2">用于表示第三个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg3">用于表示第四个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="arg4">用于表示第五个参数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示调用有参数的 static（在 Visual Basic 中为 Shared）方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，并且其 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定值。</returns>
      <param name="method">
        <see cref="T:System.Reflection.MethodInfo" /> 表示 static（在 Visual Basic 中为 Shared）方法，以将 <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为与其相等。</param>
      <param name="arguments">用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> 中的元素数量与 <paramref name="method" /> 所表示的方法的参数数量不相等。- 或 -<paramref name="arguments" /> 的一个或多个元素不能赋给 <paramref name="method" /> 所表示的方法的相应参数。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>通过调用合适的工厂方法，创建一个 <see cref="T:System.Linq.Expressions.MethodCallExpression" />，它表示对 static（在 Visual Basic 中为 Shared）方法的调用。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MethodCallExpression" /> 的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Call" />，<see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> 属性设置为表示指定的 <see cref="T:System.Reflection.MethodInfo" />（在 Visual Basic 中为 static）方法的 Shared，并且 <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> 属性设置为指定参数。</returns>
      <param name="type">
        <see cref="T:System.Type" /> 指定包含指定的 static（在 Visual Basic 中为 Shared）方法的类型。</param>
      <param name="methodName">方法的名称。</param>
      <param name="typeArguments">指定泛型方法的类型参数的 <see cref="T:System.Type" /> 对象的数组。当 methodName 指定非泛型方法时，此参数应为 null。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组，表示方法的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="methodName" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="methodName" /> 或其基类型中找不到这样的方法：名称为 <paramref name="typeArguments" />、类型参数与 <paramref name="arguments" /> 相匹配，且参数类型与 <paramref name="type" /> 相匹配。- 或 -在 <paramref name="methodName" /> 或其基类型中找到多个这样的方法：名称为 <paramref name="typeArguments" />，类型参数与 <paramref name="arguments" /> 相匹配，参数类型与 <paramref name="type" /> 相匹配。</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>指示可将节点简化为更简单的节点。如果返回 true，则可以调用 Reduce() 以生成简化形式。</summary>
      <returns>如果可以简化节点，则为 True；否则为 false。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />，其中具有对已捕获的 <see cref="T:System.Exception" /> 对象的引用以便在处理程序主体中使用。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="variable">一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，它表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。</param>
      <param name="body">catch 语句的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />，其中具有 <see cref="T:System.Exception" /> 筛选器和对已捕获的 <see cref="T:System.Exception" /> 对象的引用。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="variable">一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，它表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。</param>
      <param name="body">catch 语句的主体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 筛选器的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">此 <see cref="P:System.Linq.Expressions.Expression.Type" /> 将处理的 <see cref="T:System.Exception" /> 的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="body">catch 语句的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />，其中具有 <see cref="T:System.Exception" /> 筛选器，但没有对已捕获的 <see cref="T:System.Exception" /> 对象的引用。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">此 <see cref="P:System.Linq.Expressions.Expression.Type" /> 将处理的 <see cref="T:System.Exception" /> 的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="body">catch 语句的主体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 筛选器的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)">
      <summary>创建一个用于清除序列点的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <returns>用于清除序列点的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的实例。</returns>
      <param name="document">表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示合并运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 的 <paramref name="left" /> 属性不表示引用类型或可以为 null 的值类型。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type 和 <paramref name="right" />.Type 不可相互转换。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)">
      <summary>在给定转换函数的情况下，创建一个表示合并运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" />.Type 和 <paramref name="right" />.Type 不可相互转换。- 或 -<paramref name="conversion" /> 不为 null，并且 <paramref name="conversion" />.Type 为不是正好带一个参数的委托类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Linq.Expressions.Expression.Type" /> 的 <paramref name="left" /> 属性不表示引用类型或可以为 null 的值类型。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的 <paramref name="left" /> 属性表示一个类型，该类型不能赋给委托类型 <paramref name="conversion" />.Type 的参数类型。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的 <paramref name="right" /> 属性不等于委托类型 <paramref name="conversion" />.Type 的返回类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示条件语句的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为指定值。</returns>
      <param name="test">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="test" />、<paramref name="ifTrue" /> 或 <paramref name="ifFalse" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="test" />.Type 不为 <see cref="T:System.Boolean" />。- 或 -<paramref name="ifTrue" />.Type 不等于 <paramref name="ifFalse" />.Type。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示条件语句的 <see cref="T:System.Linq.Expressions.ConditionalExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为指定值。</returns>
      <param name="test">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
      <param name="type">要将 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />，它把 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 属性设置为指定值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />，并且其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 属性设置为指定值。</returns>
      <param name="value">要将 <see cref="T:System.Object" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />，它把 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConstantExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Constant" />，并且其 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值。</returns>
      <param name="value">要将 <see cref="T:System.Object" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不为 null 并且 <paramref name="type" /> 不可从 <paramref name="value" /> 的动态类型赋值。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个表示 continue 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>创建一个表示具有指定类型的 continue 语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Continue，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示类型转换运算的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值。</returns>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未定义 <paramref name="expression" />.Type 和 <paramref name="type" /> 之间的转换运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示为其指定实现方法的转换运算。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">未定义 <paramref name="expression" />.Type 和 <paramref name="type" /> 之间的转换运算符。- 或 -<paramref name="expression" />.Type 不能赋给 <paramref name="method" /> 所表示的方法的参数类型。- 或 -<paramref name="method" /> 所表示的方法的返回类型不能赋给 <paramref name="type" />。- 或 -<paramref name="expression" />.Type 或 <paramref name="type" /> 为可以为 null 的值类型，并且相应的不可以为 null 的值类型不分别等于 <paramref name="method" /> 所表示的方法的参数类型或返回类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个与 <paramref name="method" /> 说明相匹配的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示在目标类型发生溢出时引发异常的转换运算。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> 和 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定值。</returns>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未定义 <paramref name="expression" />.Type 和 <paramref name="type" /> 之间的转换运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示在目标类型发生溢出时引发异常且为其指定实现方法的转换运算。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />，并且其 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、<see cref="P:System.Linq.Expressions.Expression.Type" /> 和 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带一个参数。</exception>
      <exception cref="T:System.InvalidOperationException">未定义 <paramref name="expression" />.Type 和 <paramref name="type" /> 之间的转换运算符。- 或 -<paramref name="expression" />.Type 不能赋给 <paramref name="method" /> 所表示的方法的参数类型。- 或 -<paramref name="method" /> 所表示的方法的返回类型不能赋给 <paramref name="type" />。- 或 -<paramref name="expression" />.Type 或 <paramref name="type" /> 为可以为 null 的值类型，并且相应的不可以为 null 的值类型不分别等于 <paramref name="method" /> 所表示的方法的参数类型或返回类型。</exception>
      <exception cref="T:System.Reflection.AmbiguousMatchException">找到多个与 <paramref name="method" /> 说明相匹配的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>创建一个具有指定跨度的 <see cref="T:System.Linq.Expressions.DebugInfoExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的一个实例。</returns>
      <param name="document">表示源文件的 <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</param>
      <param name="startLine">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始行。必须大于 0。</param>
      <param name="startColumn">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的起始列。必须大于 0。</param>
      <param name="endLine">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束行。必须大于或等于起始行。</param>
      <param name="endColumn">此 <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 的结束列。如果结束行与起始行相同，则它必须大于或等于起始列。任何情况下都必须大于 0。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递减表达式值。</summary>
      <returns>一个表示已递减的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要递减的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递减表达式值。</summary>
      <returns>一个表示已递减的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要递减的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Default(System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.DefaultExpression" />，<see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定类型。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为指定类型。</returns>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示算术除法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">作为 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置目标的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">作为 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置目标的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义除法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示算术除法运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义除法运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示不进行溢出检查的除法赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>在给定 <see cref="T:System.Linq.Expressions.ElementInit" /> 作为第二个参数的情况下，创建一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ElementInit" />，其 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为指定值。</returns>
      <param name="addMethod">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</param>
      <param name="arguments">
        <see cref="T:System.Collections.Generic.IEnumerable`1" />（包含 <see cref="T:System.Linq.Expressions.Expression" /> 对象）要将 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为与其相等。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 或 <paramref name="arguments" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="addMethod" /> 表示的方法未命名为"Add"（不区分大小写）。- 或 -<paramref name="addMethod" /> 表示的方法不是实例方法。- 或 -<paramref name="arguments" /> 包含的元素数量与 <paramref name="addMethod" /> 所表示的方法的参数数量不同。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的 <paramref name="arguments" /> 属性不能赋给 <paramref name="addMethod" /> 所表示的方法的相应参数的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>在给定值数组作为第二个参数的情况下，创建一个 <see cref="T:System.Linq.Expressions.ElementInit" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ElementInit" />，其 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> 和 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 属性设置为指定值。</returns>
      <param name="addMethod">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</param>
      <param name="arguments">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addMethod" /> 或 <paramref name="arguments" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">addMethod 表示的方法未命名为"Add"（不区分大小写）。- 或 -addMethod 表示的方法不是实例方法。- 或 -arguments 包含的元素数量与 addMethod 所表示的方法的参数数量不同。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的 <paramref name="arguments" /> 属性不能赋给 <paramref name="addMethod" /> 所表示的方法的相应参数的类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Empty">
      <summary>创建具有 <see cref="T:System.Void" /> 类型的空表达式。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.DefaultExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Default" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <see cref="T:System.Void" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义相等运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示相等比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">若要将 true 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 true；若要将 false 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 false。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义相等运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />，创建一个表示按位 XOR 运算的 op_ExclusiveOr。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 XOR.Type 和 <paramref name="left" />.Type 定义 <paramref name="right" /> 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />，创建一个表示按位 XOR 运算的 op_ExclusiveOr。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 XOR.Type 和 <paramref name="left" />.Type 定义 <paramref name="right" /> 运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />，创建一个表示按位 XOR 赋值运算的 op_ExclusiveOr。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />，创建一个表示按位 XOR 赋值运算的 op_ExclusiveOr。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>通过对用户定义的类型使用 <see cref="T:System.Linq.Expressions.BinaryExpression" />，创建一个表示按位 XOR 赋值运算的 op_ExclusiveOr。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)">
      <summary>创建一个表示访问字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，并且其 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 和 <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为指定值。</returns>
      <param name="expression">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。对于 static（在 Visual Basic 中为 Shared），<paramref name="expression" /> 必须是 null。</param>
      <param name="field">要将 <see cref="T:System.Reflection.FieldInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="field" /> 为 null。- 或 -<paramref name="field" /> 表示的字段不为 static（在 Visual Basic 中不为 Shared），且 <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不能赋给 <paramref name="field" /> 所表示的字段的声明类型。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)">
      <summary>在给定字段名称的情况下，创建一个表示访问此字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.MemberExpression" /> 的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />，<see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> 属性设置为 <paramref name="expression" />，<see cref="P:System.Linq.Expressions.MemberExpression.Member" /> 属性设置为 <see cref="T:System.Reflection.FieldInfo" />（表示由 <paramref name="fieldName" /> 表示的字段）。</returns>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 中包含一个名为 <paramref name="fieldName" /> 的字段。对于静态字段，这可以为 null。</param>
      <param name="fieldName">要访问的字段的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 或 <paramref name="fieldName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">没有在 <paramref name="fieldName" />.Type 或其基类型中定义名为 <paramref name="expression" /> 的字段。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)">
      <summary>创建一个表示访问字段的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">字段的包含对象。对于静态字段，这可以为 null。</param>
      <param name="type">包含字段的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
      <param name="fieldName">要访问的字段。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])">
      <summary>创建一个 <see cref="T:System.Type" /> 对象，它表示具有特定类型参数的泛型 System.Action 委托类型。</summary>
      <returns>具有指定类型参数的 System.Action 委托的类型。</returns>
      <param name="typeArgs">包含多达十六个 <see cref="T:System.Type" /> 对象的数组，它指定 System.Action 委托类型的类型参数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 包含 16 个以上的元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])">
      <summary>获取一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，它表示具有特定类型参数的泛型 System.Func 或 System.Action 委托类型。</summary>
      <returns>委托类型。</returns>
      <param name="typeArgs">该委托的类型参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])">
      <summary>创建一个 <see cref="P:System.Linq.Expressions.Expression.Type" /> 对象，它表示具有特定类型参数的泛型 System.Func 委托类型。最后一个类型参数指定已创建委托的返回类型。</summary>
      <returns>具有指定类型参数的 System.Func 委托的类型。</returns>
      <param name="typeArgs">包含一到十七个 <see cref="T:System.Type" /> 对象的数组，它指定 System.Func 委托类型的类型参数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeArgs" /> 包含少于一个或多于十七个的元素。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeArgs" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个表示“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为指定值，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，并且其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个表示具有指定类型的“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>创建一个表示具有指定类型的“go to”语句的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 Goto，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为指定值，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 null 值。</returns>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“大于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"大于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“大于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。可指定实现方法。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">若要将 true 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 true；若要将 false 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 false。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"大于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“大于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"大于或等于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“大于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">若要将 true 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 true；若要将 false 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 false。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"大于或等于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，它表示带 if 语句的条件块。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 属性设置为指定值。<see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为默认表达式，并且此方法返回的结果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的类型为 <see cref="T:System.Void" />。</returns>
      <param name="test">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，它表示带 if 和 else 语句的条件块。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ConditionalExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />，并且其 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> 和 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> 属性设置为指定值。此方法返回的结果 <see cref="T:System.Linq.Expressions.ConditionalExpression" /> 的类型为 <see cref="T:System.Void" />。</returns>
      <param name="test">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</param>
      <param name="ifTrue">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</param>
      <param name="ifFalse">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递增表达式值。</summary>
      <returns>一个表示已递增的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要递增的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />，它表示按 1 递增表达式值。</summary>
      <returns>一个表示已递增的表达式的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="expression">要递增的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它将委托或 lambda 表达式应用于一个参数表达式列表。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它对提供的参数应用指定的委托或 lambda 表达式。</returns>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，它表示要应用的委托或 lambda 表达式。</param>
      <param name="arguments">一个包含 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象的 <see cref="T:System.Linq.Expressions.Expression" />，这些对象表示要对其应用委托或 lambda 表达式的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不表示委托类型或 <see cref="T:System.Linq.Expressions.Expression`1" />。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的元素的 <paramref name="arguments" /> 属性不能赋给 <paramref name="expression" /> 所表示的委托的相应参数的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> 没有包含与 <paramref name="expression" /> 所表示的委托的参数列表相同数量的元素。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它将委托或 lambda 表达式应用于一个参数表达式列表。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.InvocationExpression" />，它对提供的参数应用指定的委托或 lambda 表达式。</returns>
      <param name="expression">一个 <see cref="T:System.Linq.Expressions.Expression" />，它表示要应用的委托或 lambda 表达式。</param>
      <param name="arguments">
        <see cref="T:System.Linq.Expressions.Expression" /> 对象的数组，这些对象表示要对其应用委托或 lambda 表达式的参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" />.Type 不表示委托类型或 <see cref="T:System.Linq.Expressions.Expression`1" />。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的元素的 <paramref name="arguments" /> 属性不能赋给 <paramref name="expression" /> 所表示的委托的相应参数的类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="arguments" /> 没有包含与 <paramref name="expression" /> 所表示的委托的参数列表相同数量的元素。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)">
      <summary>返回表达式的计算结果是否为 false。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>返回表达式的计算结果是否为 false。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)">
      <summary>返回表达式的计算结果是否为 true。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>返回表达式的计算结果是否为 true。</summary>
      <returns>
        <see cref="T:System.Linq.Expressions.UnaryExpression" /> 的一个实例。</returns>
      <param name="expression">要计算的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有 void 类型但没有名称的标签。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)">
      <summary>创建一个<see cref="T:System.Linq.Expressions.LabelExpression" />，它表示不带默认值的标签。</summary>
      <returns>不带默认值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
      <param name="target">此 <see cref="T:System.Linq.Expressions.LabelTarget" /> 将关联的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelExpression" />，它表示具有给定默认值的标签。</summary>
      <returns>具有给定默认值的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</returns>
      <param name="target">此 <see cref="T:System.Linq.Expressions.LabelTarget" /> 将关联的 <see cref="T:System.Linq.Expressions.LabelExpression" />。</param>
      <param name="defaultValue">当通过常规控制流到达标签时，此 <see cref="T:System.Linq.Expressions.LabelExpression" /> 的值。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.String)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有 void 类型和给定名称的标签。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
      <param name="name">标签的名称。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有给定类型的标签。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
      <param name="type">跳转到标签时传递的值的类型。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.LabelTarget" />，它表示具有给定类型和名称的标签。</summary>
      <returns>新的 <see cref="T:System.Linq.Expressions.LabelTarget" />。</returns>
      <param name="type">跳转到标签时传递的值的类型。</param>
      <param name="name">标签的名称。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <typeparam name="TDelegate">一种委托类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 为 null。- 或 -<paramref name="parameters" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 不是委托类型。- 或 -<paramref name="body" />.Type 表示一种不能赋给 <paramref name="TDelegate" /> 的返回类型的类型。- 或 -<paramref name="parameters" /> 没有包含与 <paramref name="TDelegate" /> 的参数列表相同数量的元素。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的元素的 <paramref name="parameters" /> 属性不可从 <paramref name="TDelegate" /> 的相应参数类型的类型赋值。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。</param>
      <typeparam name="TDelegate">一种委托类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 为 null。- 或 -<paramref name="parameters" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="TDelegate" /> 不是委托类型。- 或 -<paramref name="body" />.Type 表示一种不能赋给 <paramref name="TDelegate" /> 的返回类型的类型。- 或 -<paramref name="parameters" /> 没有包含与 <paramref name="TDelegate" /> 的参数列表相同数量的元素。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的元素的 <paramref name="parameters" /> 属性不可从 <paramref name="TDelegate" /> 的相应参数类型的类型赋值。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="body" /> 为 null。- 或 -<paramref name="parameters" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 包含 16 个以上的元素。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">lambda 的名称。用于生成调试信息。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">lambda 的名称。用于发出调试信息。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">lambda 的名称。用于发出调试信息。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>创建一个在编译时委托类型已知的 <see cref="T:System.Linq.Expressions.Expression`1" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.Expression`1" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression`1.Body" />。</param>
      <param name="name">lambda 的名称。用于生成调试信息。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.Expression`1.Parameters" /> 对象。</param>
      <typeparam name="TDelegate">委托类型。</typeparam>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">其中包含用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />。如果委托类型在编译时未知，则可以使用它。</summary>
      <returns>一个表示 lambda 表达式的对象，该表达式的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="delegateType">一个 <see cref="T:System.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 或 <paramref name="body" /> 为 null。- 或 -<paramref name="parameters" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 不表示委托类型。- 或 -<paramref name="body" />.Type 表示一个类型，该类型不能赋给 <paramref name="delegateType" /> 所表示的委托类型的返回类型。- 或 -<paramref name="parameters" /> 没有包含与 <paramref name="delegateType" /> 所表示的委托类型的参数列表相同数量的元素。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的元素的 <paramref name="parameters" /> 属性不可从 <paramref name="delegateType" /> 所表示的委托类型的相应参数类型的类型赋值。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
      <summary>通过先构造一个委托类型来创建一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />。如果委托类型在编译时未知，则可以使用它。</summary>
      <returns>一个表示 lambda 表达式的对象，该表达式的 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" />，并且 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性设置为指定值。</returns>
      <param name="delegateType">一个 <see cref="T:System.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="parameters">用于填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="delegateType" /> 或 <paramref name="body" /> 为 null。- 或 -<paramref name="parameters" /> 中的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="delegateType" /> 不表示委托类型。- 或 -<paramref name="body" />.Type 表示一个类型，该类型不能赋给 <paramref name="delegateType" /> 所表示的委托类型的返回类型。- 或 -<paramref name="parameters" /> 没有包含与 <paramref name="delegateType" /> 所表示的委托类型的参数列表相同数量的元素。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的元素的 <paramref name="parameters" /> 属性不可从 <paramref name="delegateType" /> 所表示的委托类型的相应参数类型的类型赋值。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">lambda 的名称。用于发出调试信息。</param>
      <param name="tailCall">一个 <see cref="T:System.Boolean" />，指示在编译创建的表达式时是否将应用尾调用优化。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
      <summary>通过先构造一个委托类型来创建一个 LambdaExpression。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.LambdaExpression" />，其 <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> 属性等于 Lambda，并且其 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> 和 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 属性均设置为指定的值。</returns>
      <param name="delegateType">一个 <see cref="P:System.Linq.Expressions.Expression.Type" />，它表示 lambda 的委托签名。</param>
      <param name="body">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</param>
      <param name="name">lambda 的名称。用于发出调试信息。</param>
      <param name="parameters">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ParameterExpression" /> 集合的 <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> 对象。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位左移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义左移位运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位左移运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义左移位运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>创建一个表示按位左移赋值运算的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <param name="conversion">要将 <see cref="T:System.Linq.Expressions.LambdaExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“小于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"小于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“小于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">若要将 true 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 true；若要将 false 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 false。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"小于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示“小于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"小于或等于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>创建一个表示“小于或等于”数值比较的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />，并且其 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、<see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> 和 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> 属性设置为指定值。</returns>
      <param name="left">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</param>
      <param name="right">要将 <see cref="T:System.Linq.Expressions.Expression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</param>
      <param name="liftToNull">若要将 true 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 true；若要将 false 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 false。</param>
      <param name="method">要将 <see cref="T:System.Reflection.MethodInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> 不为 null 且其表示的方法返回 void；不为 static（在 Visual Basic 中不为 Shared）；或者不是正好带两个参数。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> 为 null，并且没有为 <paramref name="left" />.Type 和 <paramref name="right" />.Type 定义"小于或等于"运算符。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>创建一个其成员为字段或属性的 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 属性设置为指定值。</returns>
      <param name="member">一个 <see cref="T:System.Reflection.MemberInfo" />，表示要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的字段或属性。</param>
      <param name="initializers">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 null。- 或 -<paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。- 或 -<see cref="P:System.Reflection.FieldInfo.FieldType" /> 所表示的字段或属性的 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 或 <paramref name="member" /> 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])">
      <summary>创建一个其成员为字段或属性的 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 属性设置为指定值。</returns>
      <param name="member">一个 <see cref="T:System.Reflection.MemberInfo" />，表示要将 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为与其相等的字段或属性。</param>
      <param name="initializers">用于填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 null。- 或 -<paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。- 或 -<see cref="P:System.Reflection.FieldInfo.FieldType" /> 所表示的字段或属性的 <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 或 <paramref name="member" /> 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>基于指定的属性访问器方法创建一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <see cref="T:System.Reflection.MemberInfo" /> 中访问的属性的 <paramref name="propertyAccessor" />，并且 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 填充了 <paramref name="initializers" /> 的元素。</returns>
      <param name="propertyAccessor">一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 为 null。- 或 -<paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。- 或 -<see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 所表示的方法所访问的属性的 <paramref name="propertyAccessor" /> 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])">
      <summary>基于指定的属性访问器方法创建一个 <see cref="T:System.Linq.Expressions.MemberListBinding" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberListBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <see cref="T:System.Reflection.MemberInfo" /> 中访问的属性的 <paramref name="propertyAccessor" />，并且 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 填充了 <paramref name="initializers" /> 的元素。</returns>
      <param name="propertyAccessor">一个表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="initializers">用于填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 为 null。- 或 -<paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。- 或 -<see cref="P:System.Reflection.PropertyInfo.PropertyType" /> 所表示的方法所访问的属性的 <paramref name="propertyAccessor" /> 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})">
      <summary>创建一个使用指定 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 对象来初始化集合的 <see cref="T:System.Linq.Expressions.ElementInit" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 属性设置为指定值。</returns>
      <param name="newExpression">要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。- 或 -<paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个使用名为“Add”的方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。</returns>
      <param name="newExpression">要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。- 或 -<paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有在 <paramref name="newExpression" />.Type 或其基类型中声明任何名为"Add"（不区分大小写）的实例方法。- 或 -<paramref name="newExpression" />.Type 或其基类型上的 add 方法不是正好带一个参数。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的第一个元素的 <paramref name="initializers" /> 属性所表示的类型不能赋给 <paramref name="newExpression" />.Type 或其基类型上的 add 方法的参数类型。- 或 -<paramref name="newExpression" />.Type 和/或其基类型上存在多个名为"Add"（不区分大小写）的参数兼容的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])">
      <summary>创建一个使用指定 <see cref="T:System.Linq.Expressions.ListInitExpression" /> 对象来初始化集合的 <see cref="T:System.Linq.Expressions.ElementInit" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 和 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 属性设置为指定值。</returns>
      <param name="newExpression">要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">用于填充 <see cref="T:System.Linq.Expressions.ElementInit" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。- 或 -<paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])">
      <summary>创建一个使用名为“Add”的方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。</returns>
      <param name="newExpression">要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="initializers">用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。- 或 -<paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有在 <paramref name="newExpression" />.Type 或其基类型中声明任何名为"Add"（不区分大小写）的实例方法。- 或 -<paramref name="newExpression" />.Type 或其基类型上的 add 方法不是正好带一个参数。- 或 -<see cref="P:System.Linq.Expressions.Expression.Type" /> 的第一个元素的 <paramref name="initializers" /> 属性所表示的类型不能赋给 <paramref name="newExpression" />.Type 或其基类型上的 add 方法的参数类型。- 或 -<paramref name="newExpression" />.Type 和/或其基类型上存在多个名为"Add"（不区分大小写）的参数兼容的方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个使用指定方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。</returns>
      <param name="newExpression">要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="addMethod">一个 <see cref="T:System.Reflection.MethodInfo" />，表示名为“Add”（不区分大小写），用于将元素添加到集合的实例方法。</param>
      <param name="initializers">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。- 或 -<paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。- 或 -<paramref name="addMethod" /> 不为 null，并且它不表示名为"Add"（不区分大小写）的正好带一个参数的实例方法。- 或 -<paramref name="addMethod" /> 不为 null，并且 <see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的 <paramref name="initializers" /> 属性所表示的类型不能赋给 <paramref name="addMethod" /> 所表示的方法的参数类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> 为 null，并且 <paramref name="newExpression" />.Type 或其基类型上不存在名为"Add"的带一个兼容类型的参数的任何实例方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>创建一个使用指定方法将元素添加到集合中的 <see cref="T:System.Linq.Expressions.ListInitExpression" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.ListInitExpression" />，其 <see cref="P:System.Linq.Expressions.Expression.NodeType" /> 属性等于 <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" />，并且其 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> 属性设置为指定值。</returns>
      <param name="newExpression">要将 <see cref="T:System.Linq.Expressions.NewExpression" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</param>
      <param name="addMethod">一个 <see cref="T:System.Reflection.MethodInfo" />，表示带一个参数，用于将元素添加到集合中的实例方法。</param>
      <param name="initializers">用于填充 <see cref="T:System.Linq.Expressions.Expression" /> 集合的 <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="newExpression" /> 或 <paramref name="initializers" /> 为 null。- 或 -<paramref name="initializers" /> 的一个或多个元素为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="newExpression" />.Type 没有实现 <see cref="T:System.Collections.IEnumerable" />。- 或 -<paramref name="addMethod" /> 不为 null，并且它不表示名为"Add"（不区分大小写）的正好带一个参数的实例方法。- 或 -<paramref name="addMethod" /> 不为 null，并且 <see cref="P:System.Linq.Expressions.Expression.Type" /> 的一个或多个元素的 <paramref name="initializers" /> 属性所表示的类型不能赋给 <paramref name="addMethod" /> 所表示的方法的参数类型。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="addMethod" /> 为 null，并且 <paramref name="newExpression" />.Type 或其基类型上不存在名为"Add"的带一个兼容类型的参数的任何实例方法。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)">
      <summary>创建具有给定主体的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">循环体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)">
      <summary>创建具有给定主体和中断目标的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">循环体。</param>
      <param name="break">循环体使用的中断目标。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)">
      <summary>创建具有给定主体的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.LoopExpression" />。</returns>
      <param name="body">循环体。</param>
      <param name="break">循环体使用的中断目标。</param>
      <param name="continue">循环体使用的继续目标。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>在给定左操作数和右操作数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 与二元表达式节点不对应。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)">
      <summary>在给定左操作数、右操作数和实现方法的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">若要将 true 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 true；若要将 false 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 false。</param>
      <param name="method">一个指定实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 与二元表达式节点不对应。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>在给定左操作数、右操作数、实现方法和类型转换函数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.BinaryExpression" />。</returns>
      <param name="binaryType">指定二元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="left">一个表示左操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="right">一个表示右操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="liftToNull">若要将 true 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 true；若要将 false 设置为 <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />，则为 false。</param>
      <param name="method">一个指定实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="conversion">一个表示类型转换函数的 <see cref="T:System.Linq.Expressions.LambdaExpression" />。只有在 <paramref name="binaryType" /> 为 <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> 或复合赋值时，才使用此参数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="binaryType" /> 与二元表达式节点不对应。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> 或 <paramref name="right" /> 为 null。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>创建一个表示具有指定元素的 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</returns>
      <param name="type">此 <see cref="P:System.Linq.Expressions.Expression.Type" /> 将处理的 <see cref="T:System.Exception" /> 的 <see cref="T:System.Linq.Expressions.CatchBlock" />。</param>
      <param name="variable">一个 <see cref="T:System.Linq.Expressions.ParameterExpression" />，它表示对此处理程序捕获的 <see cref="T:System.Exception" /> 对象的引用。</param>
      <param name="body">catch 语句的主体。</param>
      <param name="filter">
        <see cref="T:System.Exception" /> 筛选器的主体。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，它表示指定的 <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 的跳转。也可以指定在跳转时传递给标签的值。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.GotoExpression" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> 等于 <paramref name="kind" />，其 <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> 属性设置为 <paramref name="target" />，并且其 <see cref="P:System.Linq.Expressions.Expression.Type" /> 属性设置为 <paramref name="type" />，此外还有一个在跳转时将传递给目标标签的 <paramref name="value" />。</returns>
      <param name="kind">
        <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> 的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="target">
        <see cref="T:System.Linq.Expressions.LabelTarget" /> 将跳至的 <see cref="T:System.Linq.Expressions.GotoExpression" />。</param>
      <param name="value">将在跳转时传递给关联标签的值。</param>
      <param name="type">要将 <see cref="T:System.Type" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.Expression.Type" />。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>创建一个 <see cref="T:System.Linq.Expressions.IndexExpression" />，它表示访问对象中的索引属性。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.IndexExpression" />。</returns>
      <param name="instance">属性所属的对象。如果属性为 static（在 Visual Basic 中为 shared），则它应为 null。</param>
      <param name="indexer">一个 <see cref="T:System.Linq.Expressions.Expression" />，它表示要编制索引的属性。</param>
      <param name="arguments">一个 IEnumerable&lt;Expression&gt;（在 Visual Basic 中为 IEnumerable (Of Expression)），其中包含将用于为属性编制索引的参数。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
      <summary>创建一个表示访问字段或属性的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.MemberExpression" />。</returns>
      <param name="expression">一个表示成员所属对象的 <see cref="T:System.Linq.Expressions.Expression" />。对于静态成员，这可以为 null。</param>
      <param name="member">描述要访问的字段或属性的 <see cref="T:System.Reflection.MemberInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})">
      <summary>创建一个表示具有指定元素的 try 块的 <see cref="T:System.Linq.Expressions.TryExpression" />。</summary>
      <returns>创建的 <see cref="T:System.Linq.Expressions.TryExpression" />。</returns>
      <param name="type">try 表达式的结果类型。如果为 null，则 bodh 和所有处理程序必须具有相同的类型。</param>
      <param name="body">try 块的主体。</param>
      <param name="finally">finally 块的主体。如果 try 块不具有关联的 finally 块，则传递 null。</param>
      <param name="fault">fault 块的主体。如果 try 块不具有关联的 fault 块，则传递 null。</param>
      <param name="handlers">表示要与 try 块关联的 catch 语句的 <see cref="T:System.Linq.Expressions.CatchBlock" /> 的集合。</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)">
      <summary>在给定操作数的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="unaryType">指定一元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="operand">一个表示操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">指定转换的目标类型的 <see cref="T:System.Type" />（如果不适用，则传递 null）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 与一元表达式节点不对应。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)">
      <summary>在给定操作数和实现方法的情况下，通过调用适当的工厂方法来创建一个 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</summary>
      <returns>通过调用适当的工厂方法生成的 <see cref="T:System.Linq.Expressions.UnaryExpression" />。</returns>
      <param name="unaryType">指定一元运算类型的 <see cref="T:System.Linq.Expressions.ExpressionType" />。</param>
      <param name="operand">一个表示操作数的 <see cref="T:System.Linq.Expressions.Expression" />。</param>
      <param name="type">指定转换的目标类型的 <see cref="T:System.Type" />（如果不适用，则传递 null）。</param>
      <param name="method">表示实现方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operand" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="unaryType" /> 与一元表达式节点不对应。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>创建一个表示递归初始化某个字段或属性的成员的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定值。</returns>
      <param name="member">要将 <see cref="T:System.Reflection.MemberInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="bindings">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。- 或 -<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 的元素的 <paramref name="bindings" /> 属性不表示 <paramref name="member" /> 所表示的字段或属性类型的成员。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])">
      <summary>创建一个表示递归初始化某个字段或属性的成员的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，并且其 <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 和 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定值。</returns>
      <param name="member">要将 <see cref="T:System.Reflection.MemberInfo" /> 属性设置为与其相等的 <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</param>
      <param name="bindings">用于填充 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> 或 <paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 不表示字段或属性。- 或 -<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 的元素的 <paramref name="bindings" /> 属性不表示 <paramref name="member" /> 所表示的字段或属性类型的成员。</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})">
      <summary>使用属性访问器方法创建一个表示对所访问的成员的成员进行递归初始化的 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />。</summary>
      <returns>一个 <see cref="T:System.Linq.Expressions.MemberMemberBinding" />，其 <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> 属性等于 <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />，<see cref="P:System.Linq.Expressions.MemberBinding.Member" /> 属性设置为表示在 <see cref="T:System.Reflection.PropertyInfo" /> 中访问的属性的 <paramref name="propertyAccessor" />，并且 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 属性设置为指定值。</returns>
      <param name="propertyAccessor">表示属性访问器方法的 <see cref="T:System.Reflection.MethodInfo" />。</param>
      <param name="bindings">一个 <see cref="T:System.Collections.Generic.IEnumerable`1" />，包含用来填充 <see cref="T:System.Linq.Expressions.MemberBinding" /> 集合的 <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> 或 <paramref name="bindings" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> 不表示属性访问器方法。- 或 -<see cref="                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      